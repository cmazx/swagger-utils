package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Error error
//
// swagger:model Error
type Error struct {

	// errors
	// Required: true
	Errors []*ErrorErrorsItems0 `json:"errors"`
}

// Validate validates this error
func (m *Error) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateErrors(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Error) validateErrors(formats strfmt.Registry) error {

	if err := validate.Required("errors", "body", m.Errors); err != nil {
		return err
	}

	for i := 0; i < len(m.Errors); i++ {
		if swag.IsZero(m.Errors[i]) { // not required
			continue
		}

		if m.Errors[i] != nil {
			if err := m.Errors[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("errors" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("errors" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this error based on the context it is used
func (m *Error) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateErrors(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Error) contextValidateErrors(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Errors); i++ {

		if m.Errors[i] != nil {
			if err := m.Errors[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("errors" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("errors" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *Error) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Error) UnmarshalBinary(b []byte) error {
	var res Error
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// ErrorErrorsItems0 error errors items0
//
// swagger:model ErrorErrorsItems0
type ErrorErrorsItems0 struct {

	// Error code
	// Required: true
	Code *string `json:"code"`

	// Detailed error description
	Detail string `json:"detail,omitempty"`

	// source
	Source *ErrorErrorsItems0Source `json:"source,omitempty"`

	// A summary of the error (does not change from occurrence to occurrence of the problem)
	// Required: true
	Title *string `json:"title"`
}

// Validate validates this error errors items0
func (m *ErrorErrorsItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSource(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTitle(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ErrorErrorsItems0) validateCode(formats strfmt.Registry) error {

	if err := validate.Required("code", "body", m.Code); err != nil {
		return err
	}

	return nil
}

func (m *ErrorErrorsItems0) validateSource(formats strfmt.Registry) error {
	if swag.IsZero(m.Source) { // not required
		return nil
	}

	if m.Source != nil {
		if err := m.Source.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("source")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("source")
			}
			return err
		}
	}

	return nil
}

func (m *ErrorErrorsItems0) validateTitle(formats strfmt.Registry) error {

	if err := validate.Required("title", "body", m.Title); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this error errors items0 based on the context it is used
func (m *ErrorErrorsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateSource(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ErrorErrorsItems0) contextValidateSource(ctx context.Context, formats strfmt.Registry) error {

	if m.Source != nil {
		if err := m.Source.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("source")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("source")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ErrorErrorsItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ErrorErrorsItems0) UnmarshalBinary(b []byte) error {
	var res ErrorErrorsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// ErrorErrorsItems0Source Error source
//
// swagger:model ErrorErrorsItems0Source
type ErrorErrorsItems0Source struct {

	// key
	// Enum: [header path query body]
	Key string `json:"key,omitempty"`

	// value
	// Example: Autorization
	Value string `json:"value,omitempty"`
}

// Validate validates this error errors items0 source
func (m *ErrorErrorsItems0Source) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateKey(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var errorErrorsItems0SourceTypeKeyPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["header","path","query","body"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		errorErrorsItems0SourceTypeKeyPropEnum = append(errorErrorsItems0SourceTypeKeyPropEnum, v)
	}
}

const (

	// ErrorErrorsItems0SourceKeyHeader captures enum value "header"
	ErrorErrorsItems0SourceKeyHeader string = "header"

	// ErrorErrorsItems0SourceKeyPath captures enum value "path"
	ErrorErrorsItems0SourceKeyPath string = "path"

	// ErrorErrorsItems0SourceKeyQuery captures enum value "query"
	ErrorErrorsItems0SourceKeyQuery string = "query"

	// ErrorErrorsItems0SourceKeyBody captures enum value "body"
	ErrorErrorsItems0SourceKeyBody string = "body"
)

// prop value enum
func (m *ErrorErrorsItems0Source) validateKeyEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, errorErrorsItems0SourceTypeKeyPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ErrorErrorsItems0Source) validateKey(formats strfmt.Registry) error {
	if swag.IsZero(m.Key) { // not required
		return nil
	}

	// value enum
	if err := m.validateKeyEnum("source"+"."+"key", "body", m.Key); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this error errors items0 source based on context it is used
func (m *ErrorErrorsItems0Source) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ErrorErrorsItems0Source) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ErrorErrorsItems0Source) UnmarshalBinary(b []byte) error {
	var res ErrorErrorsItems0Source
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
